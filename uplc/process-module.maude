fmod UPLC-PROCESS-MODULE is
    pr META-LEVEL .
    pr LEXICAL .

    var FM : FModule .
    var LT : TermList .
    var H : Header .
    var IL : ImportList .
    var SS : SortSet .
    var SSDS : SubsortDeclSet .
    var ODS : OpDeclSet .
    var MAS : MembAxSet .
    var EqS : EquationSet .
    var Eq : Equation .
    var OD : OpDecl .
    vars T T' : Term .
    var S S' : String .
    var Q : Qid .
    var N : Nat .

    op Qid : -> [Qid] [ctor] .

    op processModule : FModule Term -> FModule .
    eq processModule(FM, T) = addEquation(FM, eq 'program.Program = parseProgram(T) [none] .) .

    op parseProgram : Term -> Term .
    eq parseProgram('`(program__`)['token[T],T']) = '`(program__`)[parseVersion(T),parseTerm(T')] .

    op parseVersion : Term -> Term .
    eq parseVersion(T) = '`(_._._`)['s_^16['0.iZero],'0.iZero,'0.iZero] .

    op parseTerm : Term -> Term .
    eq parseTerm('`(builtin_`)['token[T]]) = '`(builtin_`)[parseBuiltinName(T)] [print "builtin"].
    eq parseTerm('`(lam__`)['token[T],T']) = '`(lam__`)[T,parseTerm(T')] [print "lam"].
    eq parseTerm('`[__`][T,T']) = '`[__`][parseTerm(T),parseTerm(T')] [print "application"].
    eq parseTerm('`(delay_`)[T]) = '`(delay_`)[parseTerm(T)] [print "delay"].
    eq parseTerm('`(force_`)[T]) = '`(force_`)[parseTerm(T)] [print "force"].
    eq parseTerm('`(error`).@Term@) = '`(error`).Term [print "error"].

    op parseBuiltinName : Term -> Term .
    ceq parseBuiltinName(T) = tokenize(S')
    if Q := downTerm(T, Qid)
        /\ S := string(Q) + ".BuiltName"
        /\ S' := cleamBuiltinName(S) .

    op cleamBuiltinName : String -> String .
    ceq cleamBuiltinName(S) = S
        if containUnserscore(S) = notFound .
    ceq cleamBuiltinName(S) = cleamBuiltinName(S')
        if N := containUnserscore(S)
        /\ S' := substr(S, 0, N) + "-" + substr(S, N + 1, length(S)) [owise] .

    op containUnserscore : String -> FindResult .
    eq containUnserscore(S) = find(S, "_", 0) .

    op addEquation : FModule Equation -> FModule .
    eq addEquation(fmod H is IL sorts SS . SSDS ODS MAS EqS endfm, Eq)
        = fmod H is IL sorts SS . SSDS ODS MAS (EqS Eq) endfm .
endfm