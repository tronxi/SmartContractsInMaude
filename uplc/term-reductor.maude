fmod TERM-REDUCTOR  is
    pr UPLC .

    sorts SetPair Set .
    subsort SetPair < Set .

    op (_/_) : String UplcTerm -> SetPair [ctor] .
    op emptySet : -> SetPair [ctor] .
    op _:_ : SetPair SetPair -> SetPair [ctor assoc comm id: emptySet] .

    vars St St' St'' : Set .
    var P : Program .
    vars T T' T'' : UplcTerm .
    var V : Version .
    var S : String .
    var CT : ConstantType .

    op find : Set String -> UplcTerm .
    eq find((S / T) : St, S) = T .

    op extract : Program -> SetPair .
    eq extract((program V T)) = extract(T, emptySet) .

    op extract : UplcTerm SetPair -> Set .
    eq extract((delay T), St) = extract(T, St) .
    eq extract((force T), St) = extract(T, St) .
    ceq extract([T T'], St) = St''
        if St' := extract(T, St)
        /\ St'' := extract(T', St') .
    eq extract((lam S T), St) = extract(T, St : (S / T)) .
    eq extract(T, St) = St [owise] .

    op replace : UplcTerm UplcTerm -> UplcTerm .
    eq replace(S, T') = T' [print "replace var " T'] .
    eq replace(((error)), T') = ((error)) .
    eq replace([T T'], T'') = replace(applicate([T T']), T'') [print "replace application " T T'] .
    eq replace((lam S T), T') = replace(T, T') [print "replace lam" T ] .
    eq replace(((con CT)), T') = ((con CT)) [print "replace constant " CT ] .
    eq replace(((force T)), T') = replaceForce(((force T)), T') [print "replace force " T] .
    eq replace(((delay T)), T') = ((delay replace(T, T'))) [print "replace delay " T] .

    op replaceForce : UplcTerm UplcTerm -> UplcTerm .
    eq replaceForce(((force ((delay T)))), T') = replace(T, T') .
    ceq replaceForce(((force T)), T') = replace(cleanDelay(T''), cleanDelay(T''))
        if T'' := replace(T, T') 
        /\ T'' :: Delay . 

    op cleanDelay : UplcTerm -> UplcTerm .
    eq cleanDelay(((delay T))) = T .
    eq cleanDelay(T) = T [owise] .

    op applicate : UplcTerm -> UplcTerm .
    eq applicate(((force ((delay T))))) = replace(T, T) .
    ceq applicate([T T']) = replace(T, applicate(T'))
        if applicate(T) :: Lambda [print "applicate application"] .

    ceq applicate((force (delay [T T']))) = replace(T, applicate(T')) 
     if applicate(T) :: Lambda [print "applicate force delay"] .

    ceq applicate(T) = T
        if not T :: Application [owise print "applicate value"] .
endfm