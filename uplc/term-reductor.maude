fmod TERM-REDUCTOR  is
    pr UPLC .
    pr BUILTINS-FUNCTIONS .

    var P : Program .
    vars T T' T'' : UplcTerm .
    var V : Version .
    vars S S' : String .
    var CT : ConstantType .
    var BN : BuiltName .
    vars CL CL' : ConList .
    var C : Con .
    var CO : ConstanOperation .

    op replace : UplcTerm UplcTerm -> UplcTerm .
    eq replace([T T'], T'') = replace(applicate([T T']), T'') .
    ceq replace((lam S T), T') = T''
        if T'' := replaceLam(T, T', S) .
    --- eq replace((lam S T), T') = replaceLam(T, T', S) .
    eq replace((force T), T') = replace(applicate(replaceForce((force T))), T') .


    op replaceLam : UplcTerm UplcTerm String -> UplcTerm .
    eq replaceLam(((BN CL)), T, S) = ((BN replaceTermInList(CL, T, S))) .
    ceq replaceLam(S, T, S') = T
        if S == S' .
    ceq replaceLam(S, T, S') = S
        if S =/= S' .
    eq replaceLam(((error)), T, S) = ((error)) .
    eq replaceLam(((con CT)), T, S) = ((con CT)) .
    eq replaceLam(((delay T')), T, S) = ((delay replaceLam(T', T, S))) .
    eq replaceLam(((force T')), T, S) = ((force replaceLam(T', T, S))) .
    eq replaceLam([T' T''], T, S) = [replaceLam(T', T, S) applicate(replaceLam(T'', T, S))] .
    eq replaceLam(((lam S' T')), T, S) = ((lam S' replaceLam(T', T, S))) .

    op replaceTermInList : ConList UplcTerm String -> ConList .
    eq replaceTermInList(emptyConList, T, S) = emptyConList .
    eq replaceTermInList((CL S CL'), T, S) = CL T CL' .
    eq replaceTermInList((CL T' CL'), T, S) = CL T' CL' [owise] .

    op replaceForce : UplcTerm -> UplcTerm .
    eq replaceForce((force (delay T))) = applicate(T) .
    ceq replaceForce((force (force(T)))) = applicate(cleanDelay(T')) 
        if T' := applicate ((force T))
        /\ T' :: Delay .
    ceq replaceForce((force T)) = applicate(cleanDelay(T'))
        if T' := applicate (T)
        /\ T' :: Delay [owise] .
    --- ceq replaceForce(((force T))) = applicate(cleanDelay(T''))
    ---     if T'' := applicate(T) 
    ---     /\ T'' :: Delay  [print "force "] .
    --- eq replaceForce((force(force(T)))) = applicate(T)  [print "force force"].
    --- eq replaceForce(((force T))) = applicate(cleanDelay(applicate(T))) [ owise print "otro caso " T].

    op cleanDelay : UplcTerm -> UplcTerm .
    eq cleanDelay(((delay T))) = T  .
    eq cleanDelay((force (delay T))) = T .
    eq cleanDelay(T) = T .

    op applicate : UplcTerm -> UplcTerm .
    eq applicate((force(T))) = replaceForce((force(T))) .
    ceq applicate([T T']) = replace(T, applicate(T'))
        if applicate(T) :: Lambda or T :: Lambda .
    eq applicate(((error))) = ((error)) .
    eq applicate(((con CT))) = ((con CT)) .
    eq applicate(((delay T))) = ((delay T)) .
    eq applicate(((builtin BN )))= ((builtin BN)) .
    eq applicate(((lam S T))) = ((lam S T)) .
    eq applicate((CO)) = evaluate(CO) .

endfm